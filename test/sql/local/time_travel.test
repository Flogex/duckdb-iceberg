# name: test/sql/local/time_travel.test
# description: Test time travel using both snapshot id and timestamp
# group: [local]

require avro

require parquet

require iceberg

require httpfs

require-env ICEBERG_SERVER_AVAILABLE

# Do not ignore 'HTTP' error messages!
set ignore_error_messages

statement ok
CREATE SECRET (
    TYPE S3,
    KEY_ID 'admin',
    SECRET 'password',
    ENDPOINT '127.0.0.1:9000',
    URL_STYLE 'path',
    USE_SSL 0
);


statement ok
ATTACH 'demo' AS my_datalake (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	ENDPOINT 'http://127.0.0.1:8181'
);

# Retrieve the (snapshot_id + timestamp_ms) pairs, using offset and limit

loop i 0 4

statement ok
set variable snapshot${i} = (
	select {
		'snapshot_id': snapshot_id,
		'timestamp_ms': timestamp_ms
	} from iceberg_snapshots(
		my_datalake.default.filtering_on_bounds
	) order by timestamp_ms
	offset ${i} limit 1
);

endloop

# Create these time travel queries:
# - `AT (VERSION => <snapshot_id>)`
# - `AT (TIMESTAMP => TIMESTAMP '<timestamp_ms>')`

statement ok
set variable time_travel_snapshot_id = $$
	select
		count(*)
	from my_datalake.default.filtering_on_bounds
		AT (VERSION => COMPONENT)
$$

statement ok
set variable time_travel_timestamp_ms = $$
	select
		count(*)
	from my_datalake.default.filtering_on_bounds
		AT (TIMESTAMP => TIMESTAMP 'COMPONENT')
$$

foreach component snapshot_id timestamp_ms

# Using the 'query' table function
# we can dynamically construct a query
# where we use both:
# - `AT (VERSION => <snapshot_id>)`
# - `AT (TIMESTAMP => TIMESTAMP '<timestamp_ms>')`

# To test both snapshot-id and timestamp based time travel

query I
select * from query(
	getvariable('time_travel_${component}').replace(
		'COMPONENT'::VARCHAR,
		getvariable('snapshot0').${component}::VARCHAR
	)
)
----
1000

query I
select * from query(
	getvariable('time_travel_${component}').replace(
		'COMPONENT'::VARCHAR,
		getvariable('snapshot1').${component}::VARCHAR
	)
)
----
2000

query I
select * from query(
	getvariable('time_travel_${component}').replace(
		'COMPONENT'::VARCHAR,
		getvariable('snapshot2').${component}::VARCHAR
	)
)
----
3000

query I
select * from query(
	getvariable('time_travel_${component}').replace(
		'COMPONENT'::VARCHAR,
		getvariable('snapshot3').${component}::VARCHAR
	)
)
----
4000

endloop

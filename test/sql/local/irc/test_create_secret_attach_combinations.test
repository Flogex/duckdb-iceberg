# name: test/sql/local/irc/test_create_secret_attach_combinations.test
# description: test combinations of create secret and attah
# group: [irc]

require avro

require parquet

require iceberg

require httpfs

# Test catalog secret and storage secret
statement ok
set enable_logging=true

statement ok
set logging_level='debug'

statement error
CREATE SECRET iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
	Authorization_type 'Oauth2'
);
----
Invalid Input Error: Could not get token from http://127.0.0.1:8181/v1/oauth/tokens

statement ok
CREATE SECRET storage_secret(
    TYPE S3,
    KEY_ID 'admin',
    SECRET 'password',
    ENDPOINT '127.0.0.1:9000',
    URL_STYLE 'path',
    USE_SSL 0
);


statement error
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CATALOG_SECRET iceberg_secret,
    ENDPOINT 'http://127.0.0.1:8181'
);
----
Invalid Input Error: No ICEBERG secret by the name of 'iceberg_secret' could be found

# START SKIP
mode skip

query I
SELECT message FROM duckdb_logs where type='iceberg.Catalog.Curl.HTTPRequest' and message like '%POST%' order by timestamp
----
POST http://127.0.0.1:8181/v1/oauth/tokens (curl code 'No error')

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

# drop the iceberg secret and put everything in the attach statement
statement ok
DROP SECRET iceberg_secret;

statement ok
DETACH my_datalake;

# STOP SKIP
mode unskip

statement error
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'admin',
    CLIENT_SECRET 'password',
    OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
    ENDPOINT 'http://127.0.0.1:8181'
);
----
Invalid Input Error: Could not get token from http://127.0.0.1:8181/v1/oauth/tokens

# START SKIP
mode skip

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

statement ok
Detach my_datalake;

# STOP SKIP
mode unskip

# create bad storage secret to test storage secret
statement ok
CREATE SECRET storage_secret_2 (
    TYPE S3,
    KEY_ID 'wrong',
    SECRET 'wrong',
    ENDPOINT '127.0.0.1:9000',
    URL_STYLE 'path',
    USE_SSL 0
);

statement error
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'admin',
    CLIENT_SECRET 'password',
    OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
    STORAGE_SECRET storage_secret_2,
    ENDPOINT 'http://127.0.0.1:8181'
);
----
Invalid Input Error: Could not get token from http://127.0.0.1:8181/v1/oauth/tokens


# error because the storage secret is incorrect
statement error
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
HTTP Error


statement ok
drop secret storage_secret_2

statement ok
Detach my_datalake;

# specifically use storage secret

statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'admin',
    CLIENT_SECRET 'password',
    OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
    STORAGE_SECRET storage_secret,
    ENDPOINT 'http://127.0.0.1:8181'
);

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

statement ok
detach my_datalake;

# use secret for oauth and secret for storage
statement ok
CREATE SECRET iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
    Authorization_type 'Oauth2'
);

statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    SECRET iceberg_secret,
    STORAGE_SECRET storage_secret,
    ENDPOINT 'http://127.0.0.1:8181'
);

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

# simple iceberg secret should be ok, catalog attach statement has opportunity to say what
# authorization type is.
statement ok
CREATE SECRET simple_iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password'
);




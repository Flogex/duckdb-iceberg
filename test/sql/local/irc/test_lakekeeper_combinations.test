# name: test/sql/local/irc/test_lakekeeper_combinations.test
# group: [irc]

require httpfs

require avro

require parquet

require iceberg

require-env LAKEKEEPER_SERVER_AVAILABLE

# statement ok
# create secret my_secret (
# 	TYPE s3,
# 	KEY_ID 'spark',
# 	SECRET '2OR3eRvYfSZzzZ16MlPd95jhLnOaLM52'
# )
#
# statement ok
# attach 'demo' as my_datalake (
# 	type ICEBERG,
# 	ENDPOINT 'http://localhost:8181/catalog',
# 	OAUTH2_SCOPE 'lakekeeper',
# 	OAUTH2_SERVER_URI 'http://localhost:30080/realms/iceberg/protocol/openid-connect/token',
# 	SECRET 'my_secret'
# );


# Test catalog secret and storage secret
statement ok
set enable_logging=true

statement ok
set logging_level='debug'

statement ok
CREATE SECRET iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'spark',
	CLIENT_SECRET '2OR3eRvYfSZzzZ16MlPd95jhLnOaLM52',
	OAUTH2_SERVER_URI 'http://localhost:30080/realms/iceberg/protocol/openid-connect/token',
	OAUTH2_SCOPE 'lakekeeper'
    Authorization_type 'Oauth2'
);

statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CATALOG_SECRET iceberg_secret,
    ENDPOINT 'http://127.0.0.1:8181/catalog'
);

query I
SELECT message FROM duckdb_logs where type='iceberg.Catalog.Curl.HTTPRequest' and message like '%POST%' order by timestamp
----
POST http://127.0.0.1:8181/v1/oauth/tokens (curl code 'No error')

query I
SELECT message FROM duckdb_logs where type='iceberg.Catalog.Curl.HTTPRequest' and message like '%POST%' order by timestamp
----
GET http://127.0.0.1:8181/v1/config?warehouse= (curl code 'No error')

query III
select * from my_datalake.my_namespace.my_table;
----
1	a-string	2.2

# drop the iceberg secret and put everything in the attach statement
statement ok
DROP SECRET iceberg_secret;

statement ok
DETACH my_datalake;

statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'spark',
    CLIENT_SECRET '2OR3eRvYfSZzzZ16MlPd95jhLnOaLM52',
    OAUTH2_SERVER_URI 'http://localhost:30080/realms/iceberg/protocol/openid-connect/token',
    ENDPOINT 'http://localhost:8181/catalog'
);

query III
select * from my_datalake.my_namespace.my_table;
----
1	a-string	2.2

statement ok
Detach my_datalake;

# create bad storage secret to test storage secret
statement ok
CREATE SECRET storage_secret_2 (
    TYPE S3,
    KEY_ID 'wrong',
    SECRET 'wrong',
    ENDPOINT '127.0.0.1:9000',
    URL_STYLE 'path',
    USE_SSL 0
);

statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'spark',
    CLIENT_SECRET '2OR3eRvYfSZzzZ16MlPd95jhLnOaLM52',
    OAUTH2_SERVER_URI 'http://localhost:30080/realms/iceberg/protocol/openid-connect/token',
    STORAGE_SECRET storage_secret_2,
    ENDPOINT 'http://127.0.0.1:8181'
);


# error because the storage secret should be incorrect
statement error
select count(*) from my_datalake.my_namespace.my_table;
----
HTTP Error


statement ok
detach my_datalake;

# use secret for oauth and secret for storage
# NOT SURE IF THIS IS POSSIBLE WITH LAKEKEEPER
# statement ok
# CREATE SECRET iceberg_secret (
# 	TYPE ICEBERG,
# 	CLIENT_ID 'spark',
# 	CLIENT_SECRET '2OR3eRvYfSZzzZ16MlPd95jhLnOaLM52',
# 	OAUTH2_SERVER_URI 'http://localhost:30080/realms/iceberg/protocol/openid-connect/token',,
#     Authorization_type 'Oauth2'
# );
#
# statement ok
# ATTACH '' AS my_datalake (
#     TYPE ICEBERG,
#     SECRET iceberg_secret,
#     STORAGE_SECRET storage_secret,
#     ENDPOINT 'http://127.0.0.1:8181'
# );

query III
select * from my_datalake.my_namespace.my_table;
----
1	a-string	2.2

# simple iceberg secret should be ok, catalog attach statement has opportunity to say what
# authorization type is.
statement ok
CREATE SECRET simple_iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password'
);

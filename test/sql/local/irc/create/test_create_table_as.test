# name: test/sql/local/irc/create/test_create_table_as.test
# description: test create table as
# group: [create]

# require-env ICEBERG_SERVER_AVAILABLE

require avro

require parquet

require iceberg

require httpfs

# Do not ignore 'HTTP' error messages!
set ignore_error_messages

statement ok
pragma enable_logging('HTTP');

statement ok
set logging_level='debug'

statement ok
CREATE SECRET (
    TYPE S3,
    KEY_ID 'admin',
    SECRET 'password',
    ENDPOINT '127.0.0.1:9000',
    URL_STYLE 'path',
    USE_SSL 0
);


statement ok
ATTACH '' AS my_datalake (
    TYPE ICEBERG,
    CLIENT_ID 'admin',
    CLIENT_SECRET 'password',
    WAREHOUSE_LOCATION 's3://warehouse/',
    ENDPOINT 'http://127.0.0.1:8181'
);


statement ok
use my_datalake.default

# create primitive type table from test all types
statement ok
create table all_types_table_primitives as select
bool,
tinyint,
smallint,
int,
bigint,
utinyint,
usmallint,
uint,
date,
time,
timestamp,
timestamp_tz,
float,
double,
dec_4_1,
dec_9_4,
dec_18_6,
dec38_10,
uuid,
varchar,
blob from test_all_types();

query T nosort res_1
select * from all_types_table_primitives;

query T nosort res_1
select
bool,
tinyint,
smallint,
int,
bigint,
utinyint,
usmallint,
uint,
date,
time,
timestamp,
timestamp_tz,
float,
double,
dec_4_1,
dec_9_4,
dec_18_6,
dec38_10,
uuid,
varchar,
blob from test_all_types();

# create nested types table from test all types
statement ok
create table all_types_table_nested as select
int_array,
double_array,
date_array,
timestamp_array,
timestamptz_array,
varchar_array,
nested_int_array,
struct,
struct_of_arrays,
array_of_structs,
map,
fixed_int_array,
fixed_varchar_array,
fixed_nested_int_array,
fixed_nested_varchar_array,
fixed_struct_array,
struct_of_fixed_array,
fixed_array_of_int_list,
list_of_fixed_int_array from test_all_types();


query T nosort res_nested
select * from all_types_table_nested;

query T nosort res_nested
select
int_array,
double_array,
date_array,
timestamp_array,
timestamptz_array,
varchar_array,
nested_int_array,
struct,
struct_of_arrays,
array_of_structs,
map,
fixed_int_array,
fixed_varchar_array,
fixed_nested_int_array,
fixed_nested_varchar_array,
fixed_struct_array,
struct_of_fixed_array,
fixed_array_of_int_list,
list_of_fixed_int_array from test_all_types();

mode skip

# statement ok
# create table blah as select age, id, name from read_parquet('/Users/tomebergen/duckdb-iceberg/data/persistent/column_mapping/warehouse/example/mock_data.parquet');
#
statement ok
create table all_types_table as select
column_name,
bool,
tinyint,
smallint,
int,
bigint,
hugeint,
uhugeint,
utinyint,
usmallint,
uint,
ubigint,
date,
time,
timestamp,
timestamp_s,
timestamp_ms,
timestamp_ns,
time_tz,
timestamp_tz,
float,
double,
dec_4_1,
dec_9_4,
dec_18_6,
dec38_10,
uuid,
varchar,
blob,
bit,
int_array,
double_array,
date_array,
timestamp_array,
timestamptz_array,
varchar_array,
nested_int_array,
struct,
struct_of_arrays,
array_of_structs,
map,
fixed_int_array,
fixed_varchar_array,
fixed_nested_int_array,
fixed_nested_varchar_array,
fixed_struct_array,
struct_of_fixed_array,
fixed_array_of_int_list,
list_of_fixed_int_array from test_all_types();


# can not be convertedd
interval,
varint,
small_enum,
medium_enum,
large_enum,
union,
bit
timestamp_s,
timestamp_ns,
hugeint,
uhugeint,
timestamp_ms,
time_tz,